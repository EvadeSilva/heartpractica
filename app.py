import streamlit as st
import numpy as np
import joblib

# Cargar modelo y escalador
model = joblib.load("heart_model.pkl")
scaler = joblib.load("escalador.pkl")

# Configuraci√≥n de p√°gina
st.set_page_config(page_title="Predicci√≥n de Enfermedad Card√≠aca", layout="centered", page_icon="‚ù§Ô∏è")

# T√≠tulo y descripci√≥n
st.title("‚ù§Ô∏è Predicci√≥n de Enfermedad Card√≠aca")
st.write("""
Esta aplicaci√≥n te ayuda a evaluar el riesgo de enfermedad card√≠aca con base en tus datos cl√≠nicos.  
Por favor, llena el siguiente formulario. Si no entiendes alg√∫n t√©rmino, coloca el cursor sobre el √≠cono (‚ùì).
""")

# Diccionarios explicativos
sex_dict = {"Femenino": 0, "Masculino": 1}
cp_dict = {
    "Angina t√≠pica": 0,
    "Angina at√≠pica": 1,
    "Dolor no anginoso": 2,
    "Dolor no relacionado al coraz√≥n": 3
}
restecg_dict = {
    "Normal": 0,
    "Anormalidad en la onda ST-T": 1,
    "Hipertrofia ventricular izquierda": 2
}
slope_dict = {
    "Descendente": 0,
    "Plana": 1,
    "Ascendente": 2
}
thal_dict = {
    "Fijo (defecto permanente)": 1,
    "Normal": 2,
    "Reversible (mejora con esfuerzo)": 3
}

# Formulario de ingreso de datos
with st.form("formulario_prediccion"):
    st.header("ü©∫ Ingresa los datos del paciente:")

    age = st.slider("Edad", 29, 77, help="Edad en a√±os.")

    sex_label = st.selectbox("Sexo", options=list(sex_dict.keys()), help="Sexo biol√≥gico del paciente.")
    sex = sex_dict[sex_label]

    cp_label = st.selectbox("Tipo de dolor en el pecho", options=list(cp_dict.keys()), help="""
    - Angina t√≠pica: Dolor en el pecho relacionado al esfuerzo f√≠sico.
    - Angina at√≠pica: Dolor con caracter√≠sticas no cl√°sicas.
    - Dolor no anginoso: Dolor tor√°cico no relacionado con el coraz√≥n.
    - Dolor no relacionado al coraz√≥n: Otra causa no card√≠aca.
    """)
    cp = cp_dict[cp_label]

    trestbps = st.slider("Presi√≥n arterial en reposo (mm Hg)", 90, 200, help="Presi√≥n arterial sist√≥lica al estar en reposo.")
    chol = st.slider("Colesterol s√©rico (mg/dl)", 120, 600, help="Nivel total de colesterol en sangre.")

    fbs = st.radio("¬øGlucosa en ayunas > 120 mg/dl?", options=["S√≠", "No"], help="Indica si el nivel de glucosa en ayunas supera los 120 mg/dl.")
    fbs = 1 if fbs == "S√≠" else 0

    restecg_label = st.selectbox("Resultado del electrocardiograma en reposo", options=list(restecg_dict.keys()), help="""
    - Normal
    - Anormalidad en la onda ST-T: Cambios que pueden indicar isquemia.
    - Hipertrofia ventricular izquierda: Aumento del tama√±o del m√∫sculo card√≠aco.
    """)
    restecg = restecg_dict[restecg_label]

    thalach = st.slider("Frecuencia card√≠aca m√°xima alcanzada", 70, 210, help="Frecuencia m√°xima lograda durante el ejercicio.")

    exang = st.radio("¬øAngina inducida por ejercicio?", options=["S√≠", "No"], help="Dolor en el pecho provocado por la actividad f√≠sica.")
    exang = 1 if exang == "S√≠" else 0

    oldpeak = st.slider("Depresi√≥n del ST inducida por ejercicio (mm)", 0.0, 6.5, step=0.1, help="""
    Depresi√≥n ST: Diferencia entre la l√≠nea base y el segmento ST durante el esfuerzo.  
    Valores altos pueden sugerir isquemia (falta de ox√≠geno en el coraz√≥n).
    """)

    slope_label = st.selectbox("Pendiente del segmento ST", options=list(slope_dict.keys()), help="""
    - Descendente: Indica empeoramiento durante esfuerzo.
    - Plana: Poco cambio en el ST.
    - Ascendente: Cambio normal tras el ejercicio.
    """)
    slope = slope_dict[slope_label]

    ca = st.slider("N√∫mero de vasos coloreados (fluoroscop√≠a)", 0, 4, help="Cantidad de vasos sangu√≠neos visibles con medio de contraste.")

    thal_label = st.selectbox("Resultado del test de talasemia", options=list(thal_dict.keys()), help="""
    - Fijo: Da√±o permanente detectado en imagen.
    - Normal: No se detectan anomal√≠as.
    - Reversible: Se observa mejora con ejercicio.
    """)
    thal = thal_dict[thal_label]

    submit = st.form_submit_button("Predecir")

# Procesar predicci√≥n
if submit:
    datos_usuario = np.array([[age, sex, cp, trestbps, chol, fbs, restecg,
                               thalach, exang, oldpeak, slope, ca, thal]])
    datos_escalados = scaler.transform(datos_usuario)

    prediccion = model.predict(datos_escalados)[0]
    probabilidad = model.predict_proba(datos_escalados)[0][int(prediccion)]

    st.subheader("üìä Resultado del an√°lisis")

    if prediccion == 1:
        st.error("üî¥ Posible riesgo de enfermedad card√≠aca detectado.")
        st.markdown(f"**Probabilidad estimada:** {probabilidad*100:.2f}%")
        st.info("""
Se recomienda realizar un examen cl√≠nico completo.  
Estos podr√≠an incluir: **electrocardiograma**, **ecocardiograf√≠a**, **prueba de esfuerzo**, y **an√°lisis de sangre**.
""")
    else:
        st.success("üü¢ No se detectan signos significativos de enfermedad card√≠aca.")
        st.markdown(f"**Probabilidad estimada de enfermedad:** {probabilidad*100:.2f}%")
        st.info("""
Aunque el modelo no detecta un riesgo elevado, se recomienda mantener h√°bitos saludables  
y realizar chequeos peri√≥dicos si existen antecedentes familiares.
""")

# Footer
st.markdown("---")
st.caption("üß† Este modelo fue entrenado con datos del conjunto heart-disease y optimizado con Random Forest.")
