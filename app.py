import streamlit as st
import pandas as pd
import numpy as np
import joblib

# Cargar modelo y escalador
model = joblib.load("heart_model.pkl")
scaler = joblib.load("escalador.pkl")

st.set_page_config(page_title="Predicci√≥n de Enfermedad Card√≠aca", layout="centered")
st.title("ü´Ä Predicci√≥n de Enfermedad Card√≠aca")
st.markdown("Esta aplicaci√≥n predice la probabilidad de que una persona presente una enfermedad card√≠aca, bas√°ndose en indicadores cl√≠nicos comunes. Llena el formulario con los datos del paciente. Los valores normales y explicaciones est√°n disponibles en cada campo.")

st.sidebar.header("üîç Ingresa los datos del paciente")

age = st.sidebar.slider("Edad", 29, 77, 50, help="La edad es un factor de riesgo importante. Mayores de 45 a√±os tienen m√°s riesgo.")

sex = st.sidebar.selectbox("Sexo biol√≥gico", ["Femenino", "Masculino"], help="El sexo masculino tiene mayor riesgo estad√≠stico.")

cp = st.sidebar.selectbox(
    "Tipo de dolor en el pecho",
    ["0 = Angina t√≠pica", "1 = Angina at√≠pica", "2 = Dolor no anginoso", "3 = Asintom√°tico"],
    help=(
        "Tipo 0: Dolor t√≠pico relacionado con el esfuerzo.\n"
        "Tipo 1: Dolor at√≠pico, no necesariamente relacionado al coraz√≥n.\n"
        "Tipo 2: Dolor no card√≠aco.\n"
        "Tipo 3: Sin s√≠ntomas, aunque pueda haber enfermedad."
    )
)

trestbps = st.sidebar.number_input(
    "Presi√≥n arterial en reposo (mm Hg)",
    80, 200, 120,
    help="Presi√≥n normal: <120 mm Hg. Valores mayores pueden indicar hipertensi√≥n."
)

chol = st.sidebar.number_input(
    "Colesterol s√©rico (mg/dL)",
    100, 600, 200,
    help="Colesterol normal: <200 mg/dL. Niveles elevados aumentan el riesgo card√≠aco."
)

fbs = st.sidebar.selectbox(
    "¬øGlucemia en ayunas > 120 mg/dL?",
    ["No", "S√≠"],
    help="Glucosa en ayunas elevada puede indicar diabetes o prediabetes."
)

restecg = st.sidebar.selectbox(
    "Resultados del electrocardiograma en reposo",
    ["0 = Normal", "1 = Anormalidad leve (ST-T)", "2 = Hipertrofia ventricular"],
    help="0: Normal\n1: Alteraciones leves de la onda ST o T\n2: Engrosamiento del m√∫sculo card√≠aco."
)

thalach = st.sidebar.number_input(
    "Frecuencia card√≠aca m√°xima alcanzada",
    60, 220, 150,
    help="Var√≠a con la edad. Ej: para 50 a√±os, normal ‚âà 170 lpm (220 - edad)."
)

exang = st.sidebar.selectbox(
    "¬øDolor por ejercicio (angina inducida)?",
    ["No", "S√≠"],
    help="¬øEl dolor en el pecho aparece con el esfuerzo f√≠sico?"
)

oldpeak = st.sidebar.number_input(
    "Depresi√≥n del ST inducida por ejercicio",
    0.0, 6.5, 1.0,
    help="Representa cambios en el ECG tras el ejercicio. Valores >1.0 pueden indicar isquemia."
)

slope = st.sidebar.selectbox(
    "Pendiente del segmento ST durante ejercicio",
    ["0 = Descendente", "1 = Plana", "2 = Ascendente"],
    help="Indica la forma de la curva ST en el ECG.\n0: Descendente (riesgo alto)\n2: Ascendente (normal)."
)

ca = st.sidebar.selectbox(
    "N√∫mero de vasos principales coloreados por fluoroscop√≠a",
    ["0", "1", "2", "3", "4"],
    help="0 es normal. M√°s vasos coloreados puede indicar obstrucciones coronarias visibles."
)

thal = st.sidebar.selectbox(
    "Resultado del test de talio (thalassemia)",
    ["1 = Fijo", "2 = Normal", "3 = Reversible"],
    help="1: Defecto fijo (probable da√±o permanente).\n2: Normal\n3: Defecto reversible (posible obstrucci√≥n reversible)."
)

# Procesamiento de entradas
input_dict = {
    "age": age,
    "sex": 1 if sex == "Masculino" else 0,
    "cp": int(cp[0]),
    "trestbps": trestbps,
    "chol": chol,
    "fbs": 1 if fbs == "S√≠" else 0,
    "restecg": int(restecg[0]),
    "thalach": thalach,
    "exang": 1 if exang == "S√≠" else 0,
    "oldpeak": oldpeak,
    "slope": int(slope[0]),
    "ca": int(ca),
    "thal": int(thal[0])
}

input_df = pd.DataFrame([input_dict])
input_scaled = scaler.transform(input_df)

# Predicci√≥n
if st.button("üìà Predecir"):
    prediction = model.predict(input_scaled)[0]
    probability = model.predict_proba(input_scaled)[0][int(prediction)]

    if prediction == 1:
        st.error(f"‚ö†Ô∏è Alta probabilidad de enfermedad card√≠aca ({probability:.2%})")
    else:
        st.success(f"‚úÖ Baja probabilidad de enfermedad card√≠aca ({probability:.2%})")

    st.markdown("**Nota:** Esta predicci√≥n no reemplaza un diagn√≥stico m√©dico profesional.")
